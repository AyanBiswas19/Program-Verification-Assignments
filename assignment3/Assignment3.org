#+TITLE: Assignment 3 - Insertion Sort in Dafny

* Introduction
This is the final assignment of the course Program Verification. It involves proving Insertion Sort in Dafny with use of concepts of Hoare Logic.

* Examples

** Computing max of two numbers

*** Problem Definition

Insertion Sort is a well known sorting algorithm.
It involves inserting an element in an already sorted subarray and sort it.

*** Transition System Definition

We define transition system as: 
   (X, X_0, X_f, T, Sigma, Rho, Pi)

1> X: Set of states. Each states is a tuple (a: array<int>, i: nat). Statespace is therefore : array<int> x N 
2> X_0: Set of Initial States. Here it is a singleton. X_0.a == Input Array, X_0.i == 1. This definition follows that we do not know the state of input array.
   By this I mean, we cannot determine if it's sorted. But by definiton a single element/upto first index is sorted. So initial sorted
   length = 1.
3> X_f: Set of final states. Singleton as well. final_state.i == a.Length. This implies array is sorted UPTO a.Length no. of elements, that is
   total no. of elements.
4> T: Tranistion function. If state.i < a.length : Perform Insert.
	Definition of insert: a[0...i-1] is already sorted. (As a loop invariant). Insert a[i] in this array. This is done in two steps:
	a> Finding the rightmost/highest index element < a[i] by going from right to left/ high to low index.
	   Then array to the right of that index is shifted to the right by 1.
	b> Place the initial a[i] at this index.
	i is mapped to i + 1. 
5> Sigma is the alphabet of this automaton. It is {next}.
6> Rho function maps input to initial state. array --> (array, 1)
7> Pi is the view function. It maps output to final state. final_state --> final_state.a

*** Program 

 #+BEGIN_SRC dafny :tangle

// State Space
datatype StateSpace = StateSpace(a:array<int>, i:nat)

predicate sorted(a: array<int>, l: int, r: int)
reads a
requires a.Length > 0
{
    forall i, j :: 0 <= l <= i < j <= r < a.Length ==> a[i] <= a[j]
}

predicate divided(a: array<int>, j: int, i: int)
reads a
requires a.Length > 0
requires j < a.Length && i < a.Length
{
    forall x, y :: 0 <= x <= j + 1 && j + 2 <= y <= i ==> a[x] <= a[y]
}

method transit(start : StateSpace) returns (final:StateSpace)
modifies start.a
requires start.a.Length > 0
requires start.i == 1
ensures final.a.Length > 0
ensures multiset(start.a[..]) == multiset(final.a[..])
ensures sorted(final.a, 0, final.a.Length - 1)
ensures final.i == start.a.Length
{
    var i := start.i;
    while (i < start.a.Length)
    decreases start.a.Length - i
    invariant 1 <= i <= start.a.Length
    invariant sorted(start.a, 0, i - 1)
    {
        var j := i;
        while (j >= 1 && start.a[j] < start.a[j - 1])
        decreases j
        invariant 0 <= j <= i
        invariant divided(start.a, j-1, i)
        invariant sorted(start.a, 0, j-1)
        invariant sorted(start.a, j + 1, i)
        {
            start.a[j], start.a[j - 1] := start.a[j - 1], start.a[j];
            j := j - 1;
        }
        i := i + 1;
    }
    final := StateSpace(start.a,i);
    assert sorted(final.a,0,final.a.Length-1);
}

//Rho function
function method rho(a: array<int>): StateSpace
{
    StateSpace(a,1)
}

//View Function
function method pi(s: StateSpace): array<int>
{
    s.a
}

method Main()
{
    var a := new int[5];
    a[0], a[1], a[2], a[3], a[4] := 89, 43, 57, 21, 73;
    var start := rho(a);
    var final := transit(start);
    var sorted_array := pi(final);
    assert sorted(sorted_array, 0, sorted_array.Length - 1);
}

#+END_SRC

*** Pre Conditions
Array of length > 0 of a valid data type where <, > and = is defined.
Loop invariants: 
        invariant divided(start.a, j-1, i)
        invariant sorted(start.a, 0, j-1)
        invariant sorted(start.a, j + 1, i)
in inner loop. Say P-in.
In outer loop:
    invariant sorted(start.a, 0, i - 1)
Say, P-o as it is observable. P-o is trivially derived. In the i th iteration of insertion sort, first i-1 elements are sorted.
P-in is based on 3 predicates: j refers to the current position of the element a[i] at i th iteration.
1> all elements to the left of j are less than all elements to the right of j upto i. This makes sense as the array is from 0 to i sorted
and only j might be out of postion. 
2> left subarray is sorted.
3> right subarray is sorted.
as these invariants hold, P-o holds.
as P-o holds upto but not including i == a.Length, the sort is complete.
*** Post Conditions
P-in and P-0 hold for final_state.
final_state.a is sorted
final_state.i == final_state.a.length

In Hoare logic terms, given the looping condition B = i < a.Length, statement S = insert and increment i, P = P-0,
We have shown if {P-0 ^ B} S {P}, {P} while B do S done {not B ^ P}. That is, given if invariants hold at the start and conditon is true,
Through S we move to a state where P remains true. Therefore, we prove we can run a while loop such that, while P and B are true, we can keep
using S to transit till we reach a state where P is true but B is not.